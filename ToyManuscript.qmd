---
author: Romain Ligneul
execute:
  daemon: true
  echo: false
  output: false
editor:
    render-on-save: true
---

{{< include _stat_functions_csv.qmd >}}

## Using a convoluted function to extract stats from a .csv file

The effect was clearly significant \${getStats("groupdiff","true")}.

In general, .csv files are not optimal for this type of work because we
will usually not work with big matrices when reporting stats.

You can still check `_stat_function_csv` if you are curious.

## A smarter approach based on JSON files

JSON files are dominating the internet, but not only. They are very useful to encode complex data structure.

The good thing is that Matlab structure, Python dictionary, Pandas dataframes and many other formats used by scientists can be directly encoded as json.

We can import any json data in quarto like this.

```{ojs}
//| output: false
//| echo: true
  stats = await FileAttachment("data_analysis/stats/ttest_stock.json").json();
```

Then we can extract its information.

```
\${stats["p"].toFixed(4)}
```
gives \${stats["p"].toFixed(4)}

```
\${stats["ci"][0].toFixed(2)}
```
gives \${stats["ci"][0].toFixed(2)}

```
\${stats["ci"][1].toFixed(2)}
```
gives \${stats["ci"][1].toFixed(2)}

```
\${stats["stats"]["tstat"].toFixed(2)}
```
gives \${stats["stats"]["tstat"].toFixed(2)}

```
\${stats["stats"]["df"]}
```
gives \${stats["stats"]["df"]}


So, we can combine all these information and write.

```
(t(\${stats["stats"]["df"]})= \${stats["stats"]["tstat"].toFixed(2)}, p= \${stats["p"].toFixed(4)}, CI= \${stats["ci"][0].toFixed(2)}, \${stats["ci"][1].toFixed(2)})
```
The content of the following parenthesis is generated programmatically by the code above (t(\${stats["stats"]["df"]})= \${stats["stats"]["tstat"].toFixed(2)}, p= \${stats["p"].toFixed(4)}, CI= \${stats["ci"][0].toFixed(2)}, \${stats["ci"][1].toFixed(2)}).

If you are an aficionado, you might have recognized the default naming scheme of Matlab ttest function.

And that indeed the case. These statistics come from the following snippet of code:

```matlab
folder_stats_json='stats';
%% t-test example
clear test
load stockreturns
x = stocks(:,3);
[test.h,test.p,test.ci,test.stats] = ttest(x);
% save the test as json
testname='ttest_stock';
encodedStats=jsonencode(test);
fid = fopen([folder_stats_json '\' testname '.json'],'w');
fprintf(fid,'%s',encodedStats);
fclose(fid);
```
The only thing we did is to:

-  push the output of the t-test in a structure named "test"

-  encode this structure with jsonencode

-  save the structure

Ok, but maybe the length of the cell above is redibitory for you. Also, the Markdown markup used to extract directly the content of the stats object is sensitive to spaces. 

If we remove spaces, we get:
t(\${stats["stats"]["df"]})=\${stats["stats"]["tstat"].toFixed(2)}, p=\${stats["p"].toFixed(4)}, CI=\${stats["ci"][0].toFixed(2)},\${stats["ci"][1].toFixed(2)}).

That's annoying..

So, since we are going to export t-tests and other standard statistics again and again, writing a little function might be worth the effort.

## The best approach combining functions and JSON files

Since we may have various ttests saved, it would be cool to just automatically display t-test stats by typing the name of the test. To do so, we can write the following cell.

```{ojs}
//| output: true
//| echo: true
d3 = require("d3")
async function ttest(testname) {
    var pathPrefix="data_analysis/stats/ttest_"
    var pathFile=pathPrefix+testname+".json"
    var tstats = await d3.json(pathFile)
    var outputStr='(t('+ tstats["stats"]["df"] + ')=' + tstats["stats"]["tstat"].toFixed(2) + ", " + "p=" + tstats["p"].toFixed(4) + ", CI["+tstats["ci"][0].toFixed(2)+','+tstats["ci"][1].toFixed(2)+'])'    
    return outputStr
}
```


Now, we can write down even more information in a super compact and reliable manner by simply writing down:
```
\${await ttest("stock")}
```
A beautiful parenthesis is created by typing this tiny formula: \${await ttest("stock")}

Now, we have an efficient method that can be easily extended to report various statistical analyses coming from Matlab.

For example, we can write 